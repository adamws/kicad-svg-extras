# SPDX-FileCopyrightText: 2024-present adamws <adamws@users.noreply.github.com>
#
# SPDX-License-Identifier: MIT
"""SVG processing utilities for color modification and merging."""

import logging
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Optional

from kicad_svg_extras.colors import DEFAULT_BACKGROUND_DARK

logger = logging.getLogger(__name__)

# SVG namespace
SVG_NS = "http://www.w3.org/2000/svg"
ET.register_namespace("", SVG_NS)


def merge_svg_files(
    svg_files: list[Path], output_file: Path, base_svg: Optional[Path] = None
) -> None:
    """Merge multiple SVG files into one."""
    if not svg_files:
        msg = "No SVG files to merge"
        raise ValueError(msg)

    # Parse all SVG files to determine unified viewBox
    all_files = []
    if base_svg and base_svg.exists():
        all_files.append(base_svg)
    all_files.extend(svg_files)

    # Calculate unified viewBox dimensions
    min_x, min_y = float("inf"), float("inf")
    max_x, max_y = float("-inf"), float("-inf")

    for svg_file in all_files:
        if not svg_file.exists():
            continue

        tree = ET.parse(svg_file)
        root = tree.getroot()
        viewbox = root.attrib.get("viewBox")

        if viewbox:
            x, y, w, h = map(float, viewbox.split())
            min_x = min(min_x, x)
            min_y = min(min_y, y)
            max_x = max(max_x, x + w)
            max_y = max(max_y, y + h)

    # Calculate unified dimensions
    unified_width = max_x - min_x
    unified_height = max_y - min_y
    unified_viewbox = f"{min_x} {min_y} {unified_width} {unified_height}"

    # Use simple string-based approach to avoid XML namespace issues
    svg_content = f"""<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg
xmlns:svg="http://www.w3.org/2000/svg"
xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"
version="1.1"
width="{unified_width}cm" height="{unified_height}cm" viewBox="{unified_viewbox}">
<title>Merged SVG with per-net colors</title>
<desc>Generated by net_colored_svg tool</desc>
"""

    # Extract content from all SVG files
    for svg_file in svg_files:
        if not svg_file.exists():
            continue

        with open(svg_file) as f:
            content = f.read()

        # Extract groups and elements between <svg> and </svg>
        start = content.find("<g")
        end = content.rfind("</g>") + 4

        if start != -1 and end != -1:
            group_content = content[start:end]
            # Skip background rectangles
            if f'fill="{DEFAULT_BACKGROUND_DARK}"' not in group_content:
                svg_content += group_content + "\n"

    svg_content += "</svg>"

    # Write merged SVG
    with open(output_file, "w") as f:
        f.write(svg_content)


def add_background_to_svg(svg_file: Path, background_color: str) -> None:
    """Add background to SVG file."""
    tree = ET.parse(svg_file)
    root = tree.getroot()

    desc = root.find(f".//{{{SVG_NS}}}desc")
    if desc is not None:
        # Get viewBox dimensions instead of width/height with units
        viewbox = root.attrib.get("viewBox")
        if viewbox:
            x, y, width, height = map(float, viewbox.split())
        else:
            # Fallback: strip units from width/height
            svg_w = root.attrib.get("width", "100")
            svg_h = root.attrib.get("height", "100")
            # Remove common units
            for unit in ["cm", "mm", "px", "pt", "in"]:
                svg_w = svg_w.replace(unit, "")
                svg_h = svg_h.replace(unit, "")
            x, y = 0, 0
            width = float(svg_w) if svg_w else 100
            height = float(svg_h) if svg_h else 100

        parent = root
        children = list(parent)
        desc_index = children.index(desc)

        # Add background rectangle using viewBox coordinates
        rect = ET.Element(
            "rect",
            x=str(x),
            y=str(y),
            width=str(width),
            height=str(height),
            fill=background_color,
        )
        parent.insert(desc_index + 1, rect)

        tree.write(svg_file, encoding="unicode")
