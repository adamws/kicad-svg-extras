name: CI

on:
  push:
  pull_request:
    branches: [ "master", "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade hatch

    - name: Test
      run: |
        hatch run test-unit-cov
        hatch run cov-report

    - name: Coverage
      if: matrix.python-version == '3.13'
      run: |
        echo '### Unit Tests Coverage' >> $GITHUB_STEP_SUMMARY
        hatch run coverage report --format markdown -m >> $GITHUB_STEP_SUMMARY

  functional-tests:
    name: Functional Tests (with KiCad)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install KiCad
      run: |
        sudo add-apt-repository --yes ppa:kicad/kicad-9.0-releases
        sudo apt update
        sudo apt install --install-recommends kicad

    - name: Verify KiCad installation
      run: kicad-cli version

    - name: Install Hatch
      run: |
        pip install --upgrade hatch

    - name: Run functional tests
      run: |
        hatch run test-functional-cov
        hatch run cov-report
      continue-on-error: true

    - name: Upload functional test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: functional-test-report
        path: output_test/functional_report.html
        retention-days: 7

    - name: Coverage
      run: |
        echo '### Functional Tests Coverage' >> $GITHUB_STEP_SUMMARY
        hatch run coverage report --format markdown -m >> $GITHUB_STEP_SUMMARY

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Hatch
      run: pip install --upgrade hatch

    - name: Run linting
      run: hatch run lint:all

  check-build:
    name: Check package build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Hatch
      run: pip install --upgrade hatch

    - name: Build package
      run: hatch build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-pipx-and-uvx:
    name: Test pipx and uvx
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install KiCad
      run: |
        sudo add-apt-repository --yes ppa:kicad/kicad-9.0-releases
        sudo apt update
        sudo apt install --install-recommends kicad

    - name: Install pipx
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        python -m pipx ensurepath

    - name: Install uv
      run: |
        python -m pipx install uv

    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch

    - name: Install kicad-svg-extras via pipx
      run: |
        BRANCH=${{ steps.extract_branch.outputs.branch }}
        pipx install git+https://github.com/adamws/kicad-svg-extras.git@$BRANCH

    - name: Test CLI availability
      run: |
        kicad-svg-extras --help
        echo "kicad-svg-extras CLI is available and working"

    - name: Run kicad-svg-extras via uvx
      run: |
        BRANCH=${{ steps.extract_branch.outputs.branch }}
        uvx --from git+https://github.com/adamws/kicad-svg-extras.git@$BRANCH kicad-svg-extras --help

  test-windows:
    name: Test on Windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install KiCad
      run: |
        # Install scoop if not present
        if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
        }
        # Add extras bucket for KiCad
        scoop bucket add extras
        # Install KiCad
        scoop install kicad
      shell: powershell

    - name: Verify KiCad installation
      run: |
        # Check if KiCad was installed via Scoop and find Python path
        $scoopPath = "$env:USERPROFILE\scoop\apps\kicad\current"
        if (Test-Path $scoopPath) {
          Write-Host "KiCad found at: $scoopPath"
          # Scoop KiCad Python paths
          $pythonPaths = @(
            "$scoopPath\bin\Lib\site-packages",
            "$scoopPath\lib\site-packages"
          )
          foreach ($pythonPath in $pythonPaths) {
            Write-Host "Checking Python path: $pythonPath"
            if (Test-Path $pythonPath) {
              Write-Host "Python path exists"
              # Persist env variable for use in future steps
              Add-Content -Path $env:GITHUB_ENV -Value "KICAD_PCBNEW_PATH=$pythonPath"
              Write-Host "Set and exported KICAD_PCBNEW_PATH=$pythonPath"
              break
            }
          }
        } else {
          Write-Host "KiCad installation not found in Scoop location, will rely on automatic discovery"
        }
      shell: powershell

    - name: Install Hatch
      run: pip install --upgrade hatch

    - name: Run unit tests
      run: hatch run test-unit

    - name: Install pipx
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx

    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch

    - name: Test pipx installation
      run: |
        $env:BRANCH = "${{ steps.extract_branch.outputs.branch }}"
        pipx install "git+https://github.com/adamws/kicad-svg-extras.git@$env:BRANCH"
        kicad-svg-extras --help
        Write-Host "Windows pipx installation successful"
      shell: powershell
