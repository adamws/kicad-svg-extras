[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "kicad-svg-extras"
dynamic = ["version"]
description = "Net-colored SVG generator for KiCad PCB files"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "adamws", email = "adamws@users.noreply.github.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]
dependencies = [
    # KiCad Python API is bundled with KiCad installation
]

[project.scripts]
kicad-svg-extras = "kicad_svg_extras.__main__:main"

[project.urls]
Documentation = "https://github.com/adamws/kicad-svg-extras#readme"
Issues = "https://github.com/adamws/kicad-svg-extras/issues"
Source = "https://github.com/adamws/kicad-svg-extras"

[tool.hatch.version]
path = "src/kicad_svg_extras/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/kicad_svg_extras"]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]

[tool.hatch.envs.default.scripts]
test-unit = "pytest -m unit {args}"
test-unit-cov = "coverage run --source src/* -m pytest -m unit {args}"
test-functional = "echo \"Functional testing not available in default env\""
cov-report = [
  "- coverage combine",
  "coverage report -m",
]
cov = [
  "test-unit-cov",
  "cov-report",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/kicad_svg_extras tests}"
style = [
    "ruff check --output-format=concise {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix --output-format=concise {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.black]
target-version = ["py39"]
line-length = 88

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore xml parsing of untrusted data
    "S314",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["kicad_svg_extras"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, relative imports and partial executable paths
"tests/**/*" = ["PLR2004", "S101", "TID252", "S607"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false

# Ignore missing imports for system dependencies
[[tool.mypy.overrides]]
module = [
    "pcbnew",
    "pcbnew.*",
    "wx",
    "wx.*",
    "pytest",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
    "unit: Unit tests that do not require KiCad installation",
    "functional: Functional tests that require KiCad installation and real PCB files",
]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
